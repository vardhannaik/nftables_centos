#!/usr/sbin/nft -f
#By krabelize | cryptsus.com
#nftables firewall script


# include a single file using the default search path
#include "ipv4-nat.ruleset"
# include all files ending in *.nft in the default search path
#include "*.nft"
# include all files in a given directory using an absolute path
#include "/etc/nftables/myruleset.nft"
include "/etc/sysconfig/define_banned.nft"

#define IPV6_EXT   = { getcomposer.org }
#define IPV6_EXT   =  { yourexample.com  }
#define IPV6_EXT   = { ::/0 }
define NIC_DATA_NAME = "eth0"
define NIC_DATA_MAC_GW = { x0:y0:x7:ye:xa:d5 }
define NIC_DATA_IP = "ab.cde.efg.gh"
define LOCAL_INETW = { x0.19.0.1/16 }
define LOCAL_INETWv6_2 = { xx03:x0y0:3:x0::109x:8001/64 ,  fe80::x060:y7xx:xe7e:xae5/64 }
define DNS_SERVERS =   {  xx.yyy.xx.3,  xx.yyy.xx.2, 8.8.8.8 }
define NTP_SERVERS = { 95.xxx.192.ntp1, 103.yyy.252.ntp2}
define DHCP_SERVER = " your IP DHCP"
define ICMP_IP4 = {  echo-reply, destination-unreachable, time-exceeded } 
define  ICMP_IPV6  = { destination-unreachable, packet-too-big, time-exceeded, parameter-problem, echo-reply, nd-router-advert,
                      nd-neighbor-solicit, nd-neighbor-advert }

define  MX_GOOGLE  = {  "ASPMX.L.GOOGLE.COM" , "alt4.gmail-smtp-in.l.google.com",
                                               "alt3.gmail-smtp-in.l.google.com",
                                               "alt2.gmail-smtp-in.l.google.com",
                                               "gmail-smtp-in.l.google.com",
                                               "alt1.gmail-smtp-in.l.google.com"
                                               }
define TCP_BASIC_INPUT = { http, https, ssh, smtp, 993, 4190 }
define TCP_INPUT = { abc-webpanel } 
#110 --> dovecot
#10024, 10025 --> amavis
#587-> authenticated
#465<-- used by postfix -outgoing
#25 <-- blocked by ISP outgoing, so using MX_GOOGLE, postfix is ipv4 only
#993, 143 <---imap
#995  --> pop3
#yyyy <--- managesieve
#3306 <-- SQL
define TCP_BASIC_OUTPUT  = { http, https, ssh, smtp } 


flush ruleset

#table arp filter {
#   chain input {
#	type filter hook input priority 0; policy accept;
#	#iif $NIC_DATA_NAME limit rate 1/second burst 2 packets accept
#}
#   chain output {
#       type filter hook output priority 0; policy accept;
#  }
#}


table ip filter {
#set tcp_basic_input { type inet_service; flags interval;
#	elements = { http, https, ssh, smtp, 993, 4190 } }
#set tcp_input { type inet_service; flags interval;
#	elements = { abc-webpanel }
#set tcp_basic_output { type inet_service; flags interval;
#	elements = { http, https, ssh, smtp } }

   chain base_lo_checks_input {
       iifname "lo" counter meta mark set 0x00000100 accept comment "accept loopback"
       iifname "lo" ip daddr != 127.0.0.1/8 drop comment "drop connections to loopback not destination lo IP"
       iif != lo ip daddr 127.0.0.1/8 counter drop comment "drop connections to loopback not coming from loopback"   

   }

   chain base_lo_checks_output {
      oifname "lo" counter meta mark set 0x00000100 accept
      oifname "lo" ip saddr != 127.0.0.1/8 drop
   }

   chain input {
       type filter hook input priority 0; policy drop;
        #ct mark 123 counter
        # counter drop
        ip saddr $SSH_BANNED  reject   
       ct state invalid counter drop comment "early drop of invalid packets "
       # ct state {established, related} counter accept comment "accept all connections related to connections made by us"        
       jump  base_lo_checks_input

       iifname $NIC_DATA_NAME ip daddr $NIC_DATA_IP tcp dport $TCP_INPUT ct state new,established counter meta mark set 0x00000100 accept  #webmin
       iifname $NIC_DATA_NAME ip daddr $NIC_DATA_IP tcp dport $TCP_BASIC_INPUT ct state new,established counter meta mark set 0x00000100  accept  #common
       iifname $NIC_DATA_NAME ip saddr $NTP_SERVERS udp sport { ntp } udp dport 32768-65535 ct state new,established,related counter meta mark set 0x00000100 accept
       iifname $NIC_DATA_NAME ip saddr $DNS_SERVERS udp sport { domain } udp dport { 32768-65535 } ct state established,related counter meta mark set 0x00000100 accept #udp dport domain ct state new,established accept
       iifname $NIC_DATA_NAME ip saddr 0.0.0.0/0 ip daddr $NIC_DATA_IP icmp type $ICMP_IP4  ct state new,established,related counter meta mark set 0x00000100 accept
       iifname $NIC_DATA_NAME ip daddr $NIC_DATA_IP ip saddr $MX_GOOGLE ct state new,established counter meta mark set 0x00000100 accept  #google

       counter comment "count accepted packets"
    }

    chain output {
       type filter hook output priority 0; policy drop;
        ip daddr $SSH_BANNED  reject   

      ct state invalid counter drop #drop invalid packets

      jump base_lo_checks_output

      oifname $NIC_DATA_NAME  ip saddr $NIC_DATA_IP  tcp sport { web-panel } ct state established counter meta mark set 0x00000100 accept #webmin
      oifname $NIC_DATA_NAME  ip saddr $NIC_DATA_IP  tcp sport $TCP_BASIC_OUTPUT ct state new,established,related counter meta mark set 0x00000100 accept #common
      oifname $NIC_DATA_NAME  ip daddr $NTP_SERVERS udp dport { ntp } ip  saddr $NIC_DATA_IP udp sport 32768-65535  ct state new,established,related  counter meta mark set 0x00000100 accept
      oifname $NIC_DATA_NAME  ip daddr 0.0.0.0/0    udp dport { 32768-65535 } ip  saddr $NIC_DATA_IP udp sport { 32768-65535 }   ct state new,established,related counter meta mark set 0x00000100 accept
      oifname $NIC_DATA_NAME  ip daddr $DNS_SERVERS udp sport 32768-65535 udp dport { domain }  ct state new,established,related counter meta mark set 0x00000100 accept  
      oifname $NIC_DATA_NAME  ip daddr 0.0.0.0/0 ip saddr $NIC_DATA_IP icmp type { echo-request } ct state new,established,related counter meta mark set 0x00000100 accept 
      oifname $NIC_DATA_NAME  ip saddr $NIC_DATA_IP  ip daddr $MX_GOOGLE ct state new,established,related counter meta mark set 0x00000100  accept #common
      counter  comment "count accepted packets"
   }

    chain forward {
       type filter hook forward priority 0; policy drop;               
       ip saddr $SSH_BANNED  reject   
	counter  comment "count accept forward packets"

    }
    #chain lan_only {
     #  type filter hook output priority 0; policy drop;
    #}

}

table ip6 filter {
     chain base_lo_checks_input {
       iifname "lo" counter meta mark set 0x00000100 accept comment "accept loopback"
       iifname "lo" ip6 daddr != { ::1/128  } drop  comment  "drop  connnections to loopback not destination to IP"
       iif != lo ip6 daddr { ::1/128 } counter drop comment "drop connections to loopback not coming from loopback"   
     }
     chain base_lo_checks_output {
      oifname "lo" counter meta mark set 0x00000100 accept
      oifname "lo" ip6  saddr != { ::1/128 } drop
     }
    chain input {
       type filter hook input priority 0; policy drop;

       ct state invalid counter drop comment "early drop of invalid packets "
       jump base_lo_checks_input  

       iifname $NIC_DATA_NAME ip6 daddr  $LOCAL_INETWv6_2 accept
       ct state  new    counter drop  comment  " drop incoming new"

       iifname $NIC_DATA_NAME ip6 daddr  $LOCAL_INETWv6_2 icmpv6 type $ICMP_IPV6 ct state new,established,related counter accept
       counter comment "count accepted packets"
    }

    chain output {
       type filter hook output priority 0; policy drop;
      ct state invalid counter drop #drop invalid packets
       
      jump base_lo_checks_output

      oifname $NIC_DATA_NAME ip6 saddr $LOCAL_INETWv6_2  counter meta mark set 0x00000100  accept 
      #ct state  new    counter drop  comment  " drop incoming new"

      oifname $NIC_DATA_NAME ip6  saddr $LOCAL_INETWv6_2 icmpv6 type { echo-request } ct state new,established,related counter meta mark set 0x00000100 accept

      counter comment "count accepted packets"
   }

    chain forward {
       type filter hook forward priority 0; policy drop;
       counter comment "count forwarded packets"

    }
    #chain lan_only {
       #type filter hook output priority 0; policy drop;
    #}

}

table inet filter {

#set tcp_basic_input { type inet_service; flags interval;
#	elements = { http, https, ssh, smtp, 993, 4190 } }
#set tcp_input { type inet_service; flags interval;
#	elements = { abc-webpanel }
#set tcp_basic_output { type inet_service; flags interval;
#	elements = { http, https, ssh, smtp } }



    chain input {
       type filter hook input priority 0;

      counter  mark 0x00000100  accept    #accept mark set in other families  ip/ ip6

       meta l4proto ipv6 ip6 daddr $LOCAL_INETWv6_2 accept
#IPV6  does not work with state or tcp.. so we track it in  INET family table 
#2. as  IPV6 protocol cannot be filtered with  port, so we ensure the  incoming connection is not  new
       meta nfproto ipv6 ct state new counter drop comment "early drop of new packets "
       meta nfproto ipv6 iifname $NIC_DATA_NAME ip6 daddr  $LOCAL_INETWv6_2 icmpv6 type $ICMP_IPV6 ct state new,established,related counter accept

       counter comment "count accepted packets"
    }

    chain output {
       type filter hook output priority 0;

      counter  mark 0x00000100  accept  #accept marks which were set in other families ip/ip6

#      counter comment "count accepted packets"
  }

   chain forward {
       type filter hook forward priority 0 ;  
      counter  mark 0x00000100  accept

#       counter comment "count forwarded packets"

    }
   # chain lan_only {
    #   type filter hook output priority 0; policy acccept;
    #}

}
